version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.5
  aws-ecr: circleci/aws-ecr@8.2.1
  terraform: circleci/terraform@3.2.1
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Set up virtualenv and install dependencies
          command: |
            pip install pdm
            pdm install
      - save_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
          paths:
            - /home/circleci/repo/.venv

  format:
    docker:
      - image: cimg/python:3.11.2
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Run format check
          command: |
            make format
  lint:
    docker:
      - image: cimg/python:3.11.2
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Run Python linter
          command: |
            make lint
  sort:
    docker:
      - image: cimg/python:3.11.2
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Run import sort order check
          command: |
            make sort
  test:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: run tests
          command: |
            make test
  
  check:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - restore_cache:
          key: venv-cache-{{ checksum "pdm.lock" }}-{{ checksum "pyproject.toml" }}
      - run:
          name: run type checks
          command: |
            make check
  
  build_and_push_image:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup
      - run:
          name: build and deploy API image
          command: |
            docker build . \
              -t "$AWS_ECR_REPOSITORY_URL:${CIRCLE_BRANCH}" \
              -t "$AWS_ECR_REPOSITORY_URL:latest"

            aws ecr get-login-password \
              --region $AWS_DEFAULT_REGION \
              --profile default  | docker login \
              --username AWS \
              --password-stdin \
              $AWS_ECR_REGISTRY_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

            docker push "$AWS_ECR_REPOSITORY_URL:${CIRCLE_BRANCH}"
            docker push "$AWS_ECR_REPOSITORY_URL:latest"
  
  validate_infrastructure:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: infrastructure/envs/pipeline
      - terraform/validate:
          path: infrastructure/envs/pipeline
      - terraform/fmt:
          path: infrastructure/envs/pipeline
  
  deploy_infrastructure:
    executor: terraform/default
    steps:
      - checkout
      - terraform/init:
          path: infrastructure/envs/pipeline
      - run: 
          name: select workspace and apply
          command: |
            cd infrastructure/envs/pipeline
            terraform workspace new ${CIRCLE_BRANCH} || true
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply -auto-approve
  
workflows:
  version: 2
  pipeline:
    jobs:
      - build
      - format:
          requires:
            - build
      - lint:
          requires:
            - build
      - sort:
          requires:
            - build
      - test:
          requires:
            - build
      - check:
          requires:
            - build
      - build_and_push_image:
          # requires:
          #   - format
          #   - lint
          #   - sort
          #   - test
          filters:
            branches:
              only:
                - main
                - dev
      
      - deploy_infrastructure:
          # requires:
          #   - format
          #   - lint
          #   - sort
          #   - test
          filters:
            branches:
              only:
                - main
      